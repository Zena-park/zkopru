/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from 'bn.js'
import { Contract, ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import { ContractEvent, Callback, TransactionObject, BlockType } from './types'

interface EventOptions {
  filter?: object
  fromBlock?: BlockType
  topics?: string[]
}

export class AutoRefactorCoinageI extends Contract {
  constructor(jsonInterface: any[], address?: string, options?: ContractOptions)

  clone(): AutoRefactorCoinageI

  methods: {
    factor(): TransactionObject<string>

    setFactor(factor: number | string): TransactionObject<boolean>

    burn(amount: number | string): TransactionObject<void>

    burnFrom(account: string, amount: number | string): TransactionObject<void>

    mint(account: string, amount: number | string): TransactionObject<boolean>

    totalSupply(): TransactionObject<string>

    balanceOf(account: string): TransactionObject<string>

    addMinter(account: string): TransactionObject<void>

    renounceMinter(): TransactionObject<void>

    transferOwnership(newOwner: string): TransactionObject<void>
  }

  events: {
    allEvents: (options?: EventOptions, cb?: Callback<EventLog>) => EventEmitter
  }
}
