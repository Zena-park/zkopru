/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from 'bn.js'
import { Contract, ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import { ContractEvent, Callback, TransactionObject, BlockType } from './types'

interface EventOptions {
  filter?: object
  fromBlock?: BlockType
  topics?: string[]
}

export class DepositManager extends Contract {
  constructor(jsonInterface: any[], address?: string, options?: ContractOptions)

  clone(): DepositManager

  methods: {
    globalWithdrawalDelay(): TransactionObject<string>

    isOwner(): TransactionObject<boolean>

    owner(): TransactionObject<string>

    renounceOwnership(): TransactionObject<void>

    supportsInterface(
      interfaceId: string | number[],
    ): TransactionObject<boolean>

    transferOwnership(newOwner: string): TransactionObject<void>

    withdrawalDelay(arg0: string): TransactionObject<string>

    setSeigManager(seigManager: string): TransactionObject<void>

    onApprove(
      owner: string,
      spender: string,
      amount: number | string,
      data: string | number[],
    ): TransactionObject<boolean>

    deposit(layer2: string, amount: number | string): TransactionObject<boolean>

    redeposit(layer2: string): TransactionObject<boolean>

    redepositMulti(
      layer2: string,
      n: number | string,
    ): TransactionObject<boolean>

    slash(
      layer2: string,
      recipient: string,
      amount: number | string,
    ): TransactionObject<boolean>

    setGlobalWithdrawalDelay(
      globalWithdrawalDelay_: number | string,
    ): TransactionObject<void>

    setWithdrawalDelay(
      l2chain: string,
      withdrawalDelay_: number | string,
    ): TransactionObject<void>

    requestWithdrawal(
      layer2: string,
      amount: number | string,
    ): TransactionObject<boolean>

    processRequest(
      layer2: string,
      receiveTON: boolean,
    ): TransactionObject<boolean>

    requestWithdrawalAll(layer2: string): TransactionObject<boolean>

    processRequests(
      layer2: string,
      n: number | string,
      receiveTON: boolean,
    ): TransactionObject<boolean>

    numRequests(layer2: string, account: string): TransactionObject<string>

    numPendingRequests(
      layer2: string,
      account: string,
    ): TransactionObject<string>

    wton(): TransactionObject<string>

    registry(): TransactionObject<string>

    seigManager(): TransactionObject<string>

    accStaked(layer2: string, account: string): TransactionObject<string>

    accStakedLayer2(layer2: string): TransactionObject<string>

    accStakedAccount(account: string): TransactionObject<string>

    pendingUnstaked(layer2: string, account: string): TransactionObject<string>

    pendingUnstakedLayer2(layer2: string): TransactionObject<string>

    pendingUnstakedAccount(account: string): TransactionObject<string>

    accUnstaked(layer2: string, account: string): TransactionObject<string>

    accUnstakedLayer2(layer2: string): TransactionObject<string>

    accUnstakedAccount(account: string): TransactionObject<string>

    withdrawalRequestIndex(
      layer2: string,
      account: string,
    ): TransactionObject<string>

    withdrawalRequest(
      layer2: string,
      account: string,
      index: number | string,
    ): TransactionObject<{
      withdrawableBlockNumber: string
      amount: string
      processed: boolean
      0: string
      1: string
      2: boolean
    }>
  }

  events: {
    Deposited: ContractEvent<{
      layer2: string
      depositor: string
      amount: string
      0: string
      1: string
      2: string
    }>
    OwnershipTransferred: ContractEvent<{
      previousOwner: string
      newOwner: string
      0: string
      1: string
    }>
    WithdrawalProcessed: ContractEvent<{
      layer2: string
      depositor: string
      amount: string
      0: string
      1: string
      2: string
    }>
    WithdrawalRequested: ContractEvent<{
      layer2: string
      depositor: string
      amount: string
      0: string
      1: string
      2: string
    }>
    allEvents: (options?: EventOptions, cb?: Callback<EventLog>) => EventEmitter
  }
}
