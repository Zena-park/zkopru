/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from 'bn.js'
import { Contract, ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import { ContractEvent, Callback, TransactionObject, BlockType } from './types'

interface EventOptions {
  filter?: object
  fromBlock?: BlockType
  topics?: string[]
}

export class L2RewardVault extends Contract {
  constructor(jsonInterface: any[], address?: string, options?: ContractOptions)

  clone(): L2RewardVault

  methods: {
    DEFAULT_ADMIN_ROLE(): TransactionObject<string>

    getRoleAdmin(role: string | number[]): TransactionObject<string>

    getRoleMember(
      role: string | number[],
      index: number | string,
    ): TransactionObject<string>

    getRoleMemberCount(role: string | number[]): TransactionObject<string>

    grantRole(role: string | number[], account: string): TransactionObject<void>

    hasRole(
      role: string | number[],
      account: string,
    ): TransactionObject<boolean>

    l2RewardManager(): TransactionObject<string>

    renounceRole(
      role: string | number[],
      account: string,
    ): TransactionObject<void>

    revokeRole(
      role: string | number[],
      account: string,
    ): TransactionObject<void>

    ton(): TransactionObject<string>

    wton(): TransactionObject<string>

    setL2RewardManager(_l2RewardVault: string): TransactionObject<void>

    setTON(_ton: string): TransactionObject<void>

    setWTON(_wton: string): TransactionObject<void>

    approveTON(_to: string, _amount: number | string): TransactionObject<void>

    approveWTON(_to: string, _amount: number | string): TransactionObject<void>

    approveERC20(
      _token: string,
      _to: string,
      _amount: number | string,
    ): TransactionObject<void>

    claimTON(_to: string, _amount: number | string): TransactionObject<void>

    claimWTON(_to: string, _amount: number | string): TransactionObject<void>

    claimERC20(
      _token: string,
      _to: string,
      _amount: number | string,
    ): TransactionObject<void>
  }

  events: {
    Approved: ContractEvent<{
      token: string
      to: string
      amount: string
      0: string
      1: string
      2: string
    }>
    Claimed: ContractEvent<{
      token: string
      to: string
      amount: string
      0: string
      1: string
      2: string
    }>
    RoleAdminChanged: ContractEvent<{
      role: string
      previousAdminRole: string
      newAdminRole: string
      0: string
      1: string
      2: string
    }>
    RoleGranted: ContractEvent<{
      role: string
      account: string
      sender: string
      0: string
      1: string
      2: string
    }>
    RoleRevoked: ContractEvent<{
      role: string
      account: string
      sender: string
      0: string
      1: string
      2: string
    }>
    allEvents: (options?: EventOptions, cb?: Callback<EventLog>) => EventEmitter
  }
}
