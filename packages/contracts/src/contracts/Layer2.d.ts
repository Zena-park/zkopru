/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from 'bn.js'
import { Contract, ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import { ContractEvent, Callback, TransactionObject, BlockType } from './types'

interface EventOptions {
  filter?: object
  fromBlock?: BlockType
  topics?: string[]
}

export class Layer2 extends Contract {
  constructor(jsonInterface: any[], address?: string, options?: ContractOptions)

  clone(): Layer2

  methods: {
    COST_ERO(): TransactionObject<string>

    COST_ERU(): TransactionObject<string>

    COST_NRB(): TransactionObject<string>

    COST_ORB(): TransactionObject<string>

    COST_URB(): TransactionObject<string>

    COST_URB_PREPARE(): TransactionObject<string>

    CP_COMPUTATION(): TransactionObject<string>

    CP_EXIT(): TransactionObject<string>

    CP_WITHHOLDING(): TransactionObject<string>

    EROIdToFinalize(): TransactionObject<string>

    EROs(
      arg0: number | string,
    ): TransactionObject<{
      timestamp: string
      isExit: boolean
      isTransfer: boolean
      finalized: boolean
      challenged: boolean
      value: string
      requestor: string
      to: string
      trieKey: string
      hash: string
      trieValue: string
      0: string
      1: boolean
      2: boolean
      3: boolean
      4: boolean
      5: string
      6: string
      7: string
      8: string
      9: string
      10: string
    }>

    ERUIdToFinalize(): TransactionObject<string>

    ERUs(
      arg0: number | string,
    ): TransactionObject<{
      timestamp: string
      isExit: boolean
      isTransfer: boolean
      finalized: boolean
      challenged: boolean
      value: string
      requestor: string
      to: string
      trieKey: string
      hash: string
      trieValue: string
      0: string
      1: boolean
      2: boolean
      3: boolean
      4: boolean
      5: string
      6: string
      7: string
      8: string
      9: string
      10: string
    }>

    NRELength(): TransactionObject<string>

    NULL_ADDRESS(): TransactionObject<string>

    ORBs(
      arg0: number | string,
    ): TransactionObject<{
      submitted: boolean
      numEnter: string
      epochNumber: string
      requestStart: string
      requestEnd: string
      trie: string
      0: boolean
      1: string
      2: string
      3: string
      4: string
      5: string
    }>

    PREPARE_TIMEOUT(): TransactionObject<string>

    REQUEST_GAS(): TransactionObject<string>

    URBs(
      arg0: number | string,
    ): TransactionObject<{
      submitted: boolean
      numEnter: string
      epochNumber: string
      requestStart: string
      requestEnd: string
      trie: string
      0: boolean
      1: string
      2: string
      3: string
      4: string
      5: string
    }>

    currentFork(): TransactionObject<string>

    development(): TransactionObject<boolean>

    epochHandler(): TransactionObject<string>

    etherToken(): TransactionObject<string>

    firstFilledORENumber(arg0: number | string): TransactionObject<string>

    firstNonEmptyRequestEpoch(arg0: number | string): TransactionObject<string>

    forks(
      arg0: number | string,
    ): TransactionObject<{
      forkedBlock: string
      firstEpoch: string
      lastEpoch: string
      firstBlock: string
      lastBlock: string
      lastFinalizedEpoch: string
      lastFinalizedBlock: string
      timestamp: string
      firstEnterEpoch: string
      lastEnterEpoch: string
      nextBlockToRebase: string
      rebased: boolean
      0: string
      1: string
      2: string
      3: string
      4: string
      5: string
      6: string
      7: string
      8: string
      9: string
      10: string
      11: boolean
    }>

    isLayer2(): TransactionObject<boolean>

    isMapper(account: string): TransactionObject<boolean>

    isSubmitter(account: string): TransactionObject<boolean>

    lastAppliedBlockNumber(): TransactionObject<string>

    lastAppliedEpochNumber(): TransactionObject<string>

    lastAppliedForkNumber(): TransactionObject<string>

    lastNonEmptyRequestEpoch(arg0: number | string): TransactionObject<string>

    numEnterForORB(): TransactionObject<string>

    operator(): TransactionObject<string>

    renounceMapper(): TransactionObject<void>

    renounceSubmitter(): TransactionObject<void>

    requestableContracts(arg0: string): TransactionObject<string>

    seigManager(): TransactionObject<string>

    submitHandler(): TransactionObject<string>

    changeOperator(_operator: string): TransactionObject<void>

    addSubmitter(account: string): TransactionObject<void>

    addMapper(account: string): TransactionObject<void>

    setSeigManager(account: string): TransactionObject<void>

    mapRequestableContractByOperator(
      _layer2: string,
      _childchain: string,
    ): TransactionObject<boolean>

    getNumEROs(): TransactionObject<string>

    getNumORBs(): TransactionObject<string>

    getEROBytes(_requestId: number | string): TransactionObject<string>

    prepareToSubmitURB(): TransactionObject<void>

    submitNRE(
      _pos1: number | string,
      _pos2: number | string,
      _epochStateRoot: string | number[],
      _epochTransactionsRoot: string | number[],
      _epochReceiptsRoot: string | number[],
    ): TransactionObject<boolean>

    submitORB(
      _pos: number | string,
      _statesRoot: string | number[],
      _transactionsRoot: string | number[],
      _receiptsRoot: string | number[],
    ): TransactionObject<boolean>

    submitURB(
      _pos: number | string,
      _statesRoot: string | number[],
      _transactionsRoot: string | number[],
      _receiptsRoot: string | number[],
    ): TransactionObject<boolean>

    finalizeBlock(): TransactionObject<boolean>

    challengeExit(
      _forkNumber: number | string,
      _blockNumber: number | string,
      _index: number | string,
      _receiptData: string | number[],
      _proof: string | number[],
    ): TransactionObject<void>

    challengeNullAddress(
      _blockNumber: number | string,
      _key: string | number[],
      _txByte: string | number[],
      _branchMask: number | string,
      _siblings: (string | number[])[],
    ): TransactionObject<void>

    startExit(
      _to: string,
      _trieKey: string | number[],
      _trieValue: string | number[],
    ): TransactionObject<boolean>

    startEnter(
      _to: string,
      _trieKey: string | number[],
      _trieValue: string | number[],
    ): TransactionObject<boolean>

    makeERU(
      _to: string,
      _trieKey: string | number[],
      _trieValue: string | number[],
    ): TransactionObject<boolean>

    finalizeRequest(): TransactionObject<boolean>

    finalizeRequests(n: number | string): TransactionObject<boolean>

    MAX_REQUESTS(): TransactionObject<string>

    lastBlock(forkNumber: number | string): TransactionObject<string>

    lastEpoch(forkNumber: number | string): TransactionObject<string>

    getEpoch(
      forkNumber: number | string,
      epochNumber: number | string,
    ): TransactionObject<{
      startBlockNumber: string
      endBlockNumber: string
      timestamp: string
      isEmpty: boolean
      initialized: boolean
      isRequest: boolean
      userActivated: boolean
      rebase: boolean
      RE: {
        requestStart: string
        requestEnd: string
        firstRequestBlockId: string
        numEnter: string
        nextEnterEpoch: string
        nextEpoch: string
      }
      NRE: {
        epochStateRoot: string
        epochTransactionsRoot: string
        epochReceiptsRoot: string
        submittedAt: string
        finalizedAt: string
        finalized: boolean
        challenging: boolean
        challenged: boolean
      }
    }>

    getLastEpoch(): TransactionObject<{
      startBlockNumber: string
      endBlockNumber: string
      timestamp: string
      isEmpty: boolean
      initialized: boolean
      isRequest: boolean
      userActivated: boolean
      rebase: boolean
      RE: {
        requestStart: string
        requestEnd: string
        firstRequestBlockId: string
        numEnter: string
        nextEnterEpoch: string
        nextEpoch: string
      }
      NRE: {
        epochStateRoot: string
        epochTransactionsRoot: string
        epochReceiptsRoot: string
        submittedAt: string
        finalizedAt: string
        finalized: boolean
        challenging: boolean
        challenged: boolean
      }
    }>

    getBlock(
      forkNumber: number | string,
      blockNumber: number | string,
    ): TransactionObject<{
      epochNumber: string
      requestBlockId: string
      timestamp: string
      finalizedAt: string
      referenceBlock: string
      statesRoot: string
      transactionsRoot: string
      receiptsRoot: string
      isRequest: boolean
      userActivated: boolean
      challenged: boolean
      challenging: boolean
      finalized: boolean
    }>

    getBlockFinalizedAt(
      forkNumber: number | string,
      blockNumber: number | string,
    ): TransactionObject<string>

    getLastFinalizedBlock(
      forkNumber: number | string,
    ): TransactionObject<string>

    getLastFinalizedEpoch(
      forkNumber: number | string,
    ): TransactionObject<string>

    forked(_forkNumber: number | string): TransactionObject<boolean>

    getRequestFinalized(
      _requestId: number | string,
      _userActivated: boolean,
    ): TransactionObject<boolean>
  }

  events: {
    BlockFinalized: ContractEvent<{
      forkNumber: string
      blockNumber: string
      0: string
      1: string
    }>
    BlockSubmitted: ContractEvent<{
      fork: string
      epochNumber: string
      blockNumber: string
      isRequest: boolean
      userActivated: boolean
      0: string
      1: string
      2: string
      3: boolean
      4: boolean
    }>
    ERUCreated: ContractEvent<{
      requestId: string
      requestor: string
      to: string
      trieKey: string
      trieValue: string
      0: string
      1: string
      2: string
      3: string
      4: string
    }>
    EpochFilled: ContractEvent<{
      forkNumber: string
      epochNumber: string
      0: string
      1: string
    }>
    EpochFilling: ContractEvent<{
      forkNumber: string
      epochNumber: string
      0: string
      1: string
    }>
    EpochFinalized: ContractEvent<{
      forkNumber: string
      epochNumber: string
      startBlockNumber: string
      endBlockNumber: string
      0: string
      1: string
      2: string
      3: string
    }>
    EpochPrepared: ContractEvent<{
      forkNumber: string
      epochNumber: string
      startBlockNumber: string
      endBlockNumber: string
      requestStart: string
      requestEnd: string
      epochIsEmpty: boolean
      isRequest: boolean
      userActivated: boolean
      rebase: boolean
      0: string
      1: string
      2: string
      3: string
      4: string
      5: string
      6: boolean
      7: boolean
      8: boolean
      9: boolean
    }>
    EpochRebased: ContractEvent<{
      forkNumber: string
      epochNumber: string
      startBlockNumber: string
      endBlockNumber: string
      requestStart: string
      requestEnd: string
      epochIsEmpty: boolean
      isRequest: boolean
      userActivated: boolean
      0: string
      1: string
      2: string
      3: string
      4: string
      5: string
      6: boolean
      7: boolean
      8: boolean
    }>
    Forked: ContractEvent<{
      newFork: string
      epochNumber: string
      forkedBlockNumber: string
      0: string
      1: string
      2: string
    }>
    MapperAdded: ContractEvent<string>
    MapperRemoved: ContractEvent<string>
    OperatorChanged: ContractEvent<string>
    RequestApplied: ContractEvent<{
      requestId: string
      userActivated: boolean
      0: string
      1: boolean
    }>
    RequestChallenged: ContractEvent<{
      requestId: string
      userActivated: boolean
      0: string
      1: boolean
    }>
    RequestCreated: ContractEvent<{
      requestId: string
      requestor: string
      to: string
      weiAmount: string
      trieKey: string
      trieValue: string
      isExit: boolean
      userActivated: boolean
      0: string
      1: string
      2: string
      3: string
      4: string
      5: string
      6: boolean
      7: boolean
    }>
    RequestFinalized: ContractEvent<{
      requestId: string
      userActivated: boolean
      0: string
      1: boolean
    }>
    RequestableContractMapped: ContractEvent<{
      contractInRootchain: string
      contractInChildchain: string
      0: string
      1: string
    }>
    SessionTimeout: ContractEvent<boolean>
    SubmitterAdded: ContractEvent<string>
    SubmitterRemoved: ContractEvent<string>
    allEvents: (options?: EventOptions, cb?: Callback<EventLog>) => EventEmitter
  }
}
