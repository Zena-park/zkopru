/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from 'bn.js'
import { Contract, ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import { ContractEvent, Callback, TransactionObject, BlockType } from './types'

interface EventOptions {
  filter?: object
  fromBlock?: BlockType
  topics?: string[]
}

export class Layer2Registry extends Contract {
  constructor(jsonInterface: any[], address?: string, options?: ContractOptions)

  clone(): Layer2Registry

  methods: {
    isOwner(): TransactionObject<boolean>

    owner(): TransactionObject<string>

    renounceOwnership(): TransactionObject<void>

    transferOwnership(newOwner: string): TransactionObject<void>

    layer2s(layer2: string): TransactionObject<boolean>

    numLayer2s(): TransactionObject<string>

    layer2ByIndex(index: number | string): TransactionObject<string>

    register(layer2: string): TransactionObject<boolean>

    deployCoinage(
      layer2: string,
      seigManager: string,
    ): TransactionObject<boolean>

    registerAndDeployCoinage(
      layer2: string,
      seigManager: string,
    ): TransactionObject<boolean>

    registerAndDeployCoinageAndSetCommissionRate(
      layer2: string,
      seigManager: string,
      commissionRate: number | string,
      isCommissionRateNegative: boolean,
    ): TransactionObject<boolean>

    unregister(layer2: string): TransactionObject<boolean>
  }

  events: {
    OwnershipTransferred: ContractEvent<{
      previousOwner: string
      newOwner: string
      0: string
      1: string
    }>
    allEvents: (options?: EventOptions, cb?: Callback<EventLog>) => EventEmitter
  }
}
