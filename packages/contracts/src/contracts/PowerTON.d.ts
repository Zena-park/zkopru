/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from 'bn.js'
import { Contract, ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import { ContractEvent, Callback, TransactionObject, BlockType } from './types'

interface EventOptions {
  filter?: object
  fromBlock?: BlockType
  topics?: string[]
}

export class PowerTON extends Contract {
  constructor(jsonInterface: any[], address?: string, options?: ContractOptions)

  clone(): PowerTON

  methods: {
    addPauser(account: string): TransactionObject<void>

    initialized(): TransactionObject<boolean>

    isOwner(): TransactionObject<boolean>

    isPauser(account: string): TransactionObject<boolean>

    owner(): TransactionObject<string>

    pause(): TransactionObject<void>

    paused(): TransactionObject<boolean>

    renounceMinter(target: string): TransactionObject<void>

    renounceOwnership(target: string): TransactionObject<void>

    renouncePauser(target: string): TransactionObject<void>

    rounds(
      arg0: number | string,
    ): TransactionObject<{
      startTime: string
      endTime: string
      reward: string
      winner: string
      0: string
      1: string
      2: string
      3: string
    }>

    transferOwnership(target: string, newOwner: string): TransactionObject<void>

    unpause(): TransactionObject<void>

    setSeigManager(seigManager: string): TransactionObject<void>

    init(): TransactionObject<void>

    start(): TransactionObject<void>

    powerOf(account: string): TransactionObject<string>

    endRound(): TransactionObject<void>

    roundStarted(round: number | string): TransactionObject<boolean>

    roundFinished(round: number | string): TransactionObject<boolean>

    currentRoundFinished(): TransactionObject<boolean>

    onDeposit(
      layer2: string,
      account: string,
      amount: number | string,
    ): TransactionObject<void>

    onWithdraw(
      layer2: string,
      account: string,
      amount: number | string,
    ): TransactionObject<void>

    seigManager(): TransactionObject<string>

    wton(): TransactionObject<string>

    currentRound(): TransactionObject<string>

    roundDuration(): TransactionObject<string>

    totalDeposits(): TransactionObject<string>

    winnerOf(round: number | string): TransactionObject<string>
  }

  events: {
    OwnershipTransferred: ContractEvent<{
      previousOwner: string
      newOwner: string
      0: string
      1: string
    }>
    Paused: ContractEvent<string>
    PauserAdded: ContractEvent<string>
    PauserRemoved: ContractEvent<string>
    PowerDecreased: ContractEvent<{
      account: string
      amount: string
      0: string
      1: string
    }>
    PowerIncreased: ContractEvent<{
      account: string
      amount: string
      0: string
      1: string
    }>
    RoundEnd: ContractEvent<{
      round: string
      winner: string
      reward: string
      0: string
      1: string
      2: string
    }>
    RoundStart: ContractEvent<{
      round: string
      startTime: string
      endTime: string
      0: string
      1: string
      2: string
    }>
    Unpaused: ContractEvent<string>
    allEvents: (options?: EventOptions, cb?: Callback<EventLog>) => EventEmitter
  }
}
