/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from 'bn.js'
import { Contract, ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import { ContractEvent, Callback, TransactionObject, BlockType } from './types'

interface EventOptions {
  filter?: object
  fromBlock?: BlockType
  topics?: string[]
}

export class SeigManager extends Contract {
  constructor(jsonInterface: any[], address?: string, options?: ContractOptions)

  clone(): SeigManager

  methods: {
    MAX_VALID_COMMISSION(): TransactionObject<string>

    MIN_VALID_COMMISSION(): TransactionObject<string>

    RAY(): TransactionObject<string>

    _dao(): TransactionObject<string>

    accRelativeSeig(): TransactionObject<string>

    addPauser(account: string): TransactionObject<void>

    adjustCommissionDelay(): TransactionObject<string>

    daoSeigRate(): TransactionObject<string>

    delayedCommissionBlock(arg0: string): TransactionObject<string>

    delayedCommissionRate(arg0: string): TransactionObject<string>

    delayedCommissionRateNegative(arg0: string): TransactionObject<boolean>

    factory(): TransactionObject<string>

    isChallenger(account: string): TransactionObject<boolean>

    isOwner(): TransactionObject<boolean>

    isPauser(account: string): TransactionObject<boolean>

    minimumAmount(): TransactionObject<string>

    owner(): TransactionObject<string>

    paused(): TransactionObject<boolean>

    powerTONSeigRate(): TransactionObject<string>

    relativeSeigRate(): TransactionObject<string>

    renounceChallenger(): TransactionObject<void>

    renounceMinter(target: string): TransactionObject<void>

    renounceOwnership(target: string): TransactionObject<void>

    renouncePauser(target: string): TransactionObject<void>

    transferOwnership(target: string, newOwner: string): TransactionObject<void>

    pause(): TransactionObject<void>

    unpause(): TransactionObject<void>

    setPowerTON(powerton: string): TransactionObject<void>

    setDao(daoAddress: string): TransactionObject<void>

    deployCoinage(layer2: string): TransactionObject<boolean>

    setCommissionRate(
      layer2: string,
      commissionRate: number | string,
      isCommissionRateNegative: boolean,
    ): TransactionObject<boolean>

    getOperatorAmount(layer2: string): TransactionObject<boolean>

    updateSeigniorage(): TransactionObject<boolean>

    onTransfer(
      sender: string,
      recipient: string,
      amount: number | string,
    ): TransactionObject<boolean>

    onDeposit(
      layer2: string,
      account: string,
      amount: number | string,
    ): TransactionObject<boolean>

    onWithdraw(
      layer2: string,
      account: string,
      amount: number | string,
    ): TransactionObject<boolean>

    setPowerTONSeigRate(
      powerTONSeigRate_: number | string,
    ): TransactionObject<void>

    setDaoSeigRate(daoSeigRate_: number | string): TransactionObject<void>

    setPseigRate(PseigRate_: number | string): TransactionObject<void>

    setCoinageFactory(factory_: string): TransactionObject<void>

    addChallenger(account: string): TransactionObject<void>

    transferCoinageOwnership(
      newSeigManager: string,
      coinages: string[],
    ): TransactionObject<void>

    renounceWTONMinter(): TransactionObject<void>

    slash(layer2: string, challenger: string): TransactionObject<boolean>

    additionalTotBurnAmount(
      layer2: string,
      account: string,
      amount: number | string,
    ): TransactionObject<string>

    setAdjustDelay(adjustDelay_: number | string): TransactionObject<void>

    setMinimumAmount(minimumAmount_: number | string): TransactionObject<void>

    uncomittedStakeOf(
      layer2: string,
      account: string,
    ): TransactionObject<string>

    stakeOf(layer2: string, account: string): TransactionObject<string>

    registry(): TransactionObject<string>

    depositManager(): TransactionObject<string>

    ton(): TransactionObject<string>

    wton(): TransactionObject<string>

    powerton(): TransactionObject<string>

    tot(): TransactionObject<string>

    coinages(layer2: string): TransactionObject<string>

    commissionRates(layer2: string): TransactionObject<string>

    isCommissionRateNegative(layer2: string): TransactionObject<boolean>

    lastCommitBlock(layer2: string): TransactionObject<string>

    seigPerBlock(): TransactionObject<string>

    lastSeigBlock(): TransactionObject<string>

    pausedBlock(): TransactionObject<string>

    unpausedBlock(): TransactionObject<string>

    DEFAULT_FACTOR(): TransactionObject<string>
  }

  events: {
    ChallengerAdded: ContractEvent<string>
    ChallengerRemoved: ContractEvent<string>
    CoinageCreated: ContractEvent<{
      layer2: string
      coinage: string
      0: string
      1: string
    }>
    Comitted: ContractEvent<string>
    CommissionRateSet: ContractEvent<{
      layer2: string
      previousRate: string
      newRate: string
      0: string
      1: string
      2: string
    }>
    CommitLog1: ContractEvent<{
      totalStakedAmount: string
      totalSupplyOfWTON: string
      prevTotalSupply: string
      nextTotalSupply: string
      0: string
      1: string
      2: string
      3: string
    }>
    OwnershipTransferred: ContractEvent<{
      previousOwner: string
      newOwner: string
      0: string
      1: string
    }>
    Paused: ContractEvent<string>
    PauserAdded: ContractEvent<string>
    PauserRemoved: ContractEvent<string>
    SeigGiven: ContractEvent<{
      layer2: string
      totalSeig: string
      stakedSeig: string
      unstakedSeig: string
      powertonSeig: string
      pseig: string
      0: string
      1: string
      2: string
      3: string
      4: string
      5: string
    }>
    Unpaused: ContractEvent<string>
    UnstakeLog: ContractEvent<{
      coinageBurnAmount: string
      totBurnAmount: string
      0: string
      1: string
    }>
    allEvents: (options?: EventOptions, cb?: Callback<EventLog>) => EventEmitter
  }
}
