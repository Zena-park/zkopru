/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from 'bn.js'
import { Contract, ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import { ContractEvent, Callback, TransactionObject, BlockType } from './types'

interface EventOptions {
  filter?: object
  fromBlock?: BlockType
  topics?: string[]
}

export class SeigManagerI extends Contract {
  constructor(jsonInterface: any[], address?: string, options?: ContractOptions)

  clone(): SeigManagerI

  methods: {
    registry(): TransactionObject<string>

    depositManager(): TransactionObject<string>

    ton(): TransactionObject<string>

    wton(): TransactionObject<string>

    powerton(): TransactionObject<string>

    tot(): TransactionObject<string>

    coinages(layer2: string): TransactionObject<string>

    commissionRates(layer2: string): TransactionObject<string>

    lastCommitBlock(layer2: string): TransactionObject<string>

    seigPerBlock(): TransactionObject<string>

    lastSeigBlock(): TransactionObject<string>

    pausedBlock(): TransactionObject<string>

    unpausedBlock(): TransactionObject<string>

    DEFAULT_FACTOR(): TransactionObject<string>

    deployCoinage(layer2: string): TransactionObject<boolean>

    setCommissionRate(
      layer2: string,
      commission: number | string,
      isCommissionRateNegative: boolean,
    ): TransactionObject<boolean>

    uncomittedStakeOf(
      layer2: string,
      account: string,
    ): TransactionObject<string>

    stakeOf(layer2: string, account: string): TransactionObject<string>

    additionalTotBurnAmount(
      layer2: string,
      account: string,
      amount: number | string,
    ): TransactionObject<string>

    onTransfer(
      sender: string,
      recipient: string,
      amount: number | string,
    ): TransactionObject<boolean>

    updateSeigniorage(): TransactionObject<boolean>

    onDeposit(
      layer2: string,
      account: string,
      amount: number | string,
    ): TransactionObject<boolean>

    onWithdraw(
      layer2: string,
      account: string,
      amount: number | string,
    ): TransactionObject<boolean>
  }

  events: {
    allEvents: (options?: EventOptions, cb?: Callback<EventLog>) => EventEmitter
  }
}
