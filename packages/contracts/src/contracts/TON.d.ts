/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from 'bn.js'
import { Contract, ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import { ContractEvent, Callback, TransactionObject, BlockType } from './types'

interface EventOptions {
  filter?: object
  fromBlock?: BlockType
  topics?: string[]
}

export class TON extends Contract {
  constructor(jsonInterface: any[], address?: string, options?: ContractOptions)

  clone(): TON

  methods: {
    addMinter(account: string): TransactionObject<void>

    allowance(owner: string, spender: string): TransactionObject<string>

    approve(
      spender: string,
      amount: number | string,
    ): TransactionObject<boolean>

    approveAndCall(
      spender: string,
      amount: number | string,
      data: string | number[],
    ): TransactionObject<boolean>

    balanceOf(account: string): TransactionObject<string>

    callbackEnabled(): TransactionObject<boolean>

    decimals(): TransactionObject<string>

    decreaseAllowance(
      spender: string,
      subtractedValue: number | string,
    ): TransactionObject<boolean>

    enableCallback(_callbackEnabled: boolean): TransactionObject<void>

    increaseAllowance(
      spender: string,
      addedValue: number | string,
    ): TransactionObject<boolean>

    isMinter(account: string): TransactionObject<boolean>

    isOwner(): TransactionObject<boolean>

    mint(account: string, amount: number | string): TransactionObject<boolean>

    name(): TransactionObject<string>

    owner(): TransactionObject<string>

    renounceMinter(target: string): TransactionObject<void>

    renounceOwnership(target: string): TransactionObject<void>

    renouncePauser(target: string): TransactionObject<void>

    seigManager(): TransactionObject<string>

    symbol(): TransactionObject<string>

    totalSupply(): TransactionObject<string>

    transfer(
      recipient: string,
      amount: number | string,
    ): TransactionObject<boolean>

    transferFrom(
      sender: string,
      recipient: string,
      amount: number | string,
    ): TransactionObject<boolean>

    transferOwnership(target: string, newOwner: string): TransactionObject<void>

    setSeigManager(_seigManager: string): TransactionObject<void>
  }

  events: {
    Approval: ContractEvent<{
      owner: string
      spender: string
      value: string
      0: string
      1: string
      2: string
    }>
    MinterAdded: ContractEvent<string>
    MinterRemoved: ContractEvent<string>
    OwnershipTransferred: ContractEvent<{
      previousOwner: string
      newOwner: string
      0: string
      1: string
    }>
    Transfer: ContractEvent<{
      from: string
      to: string
      value: string
      0: string
      1: string
      2: string
    }>
    allEvents: (options?: EventOptions, cb?: Callback<EventLog>) => EventEmitter
  }
}
