/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from 'bn.js'
import { Contract, ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import { ContractEvent, Callback, TransactionObject, BlockType } from './types'

interface EventOptions {
  filter?: object
  fromBlock?: BlockType
  topics?: string[]
}

export class TokamakConnector extends Contract {
  constructor(jsonInterface: any[], address?: string, options?: ContractOptions)

  clone(): TokamakConnector

  methods: {
    CHALLENGE_PERIOD(): TransactionObject<string>

    MAX_BLOCK_SIZE(): TransactionObject<string>

    MAX_UTXO(): TransactionObject<string>

    MAX_VALIDATION_GAS(): TransactionObject<string>

    MAX_WITHDRAWAL(): TransactionObject<string>

    MINIMUM_STAKE(): TransactionObject<string>

    NULLIFIER_TREE_DEPTH(): TransactionObject<string>

    REF_DEPTH(): TransactionObject<string>

    UTXO_SUB_TREE_DEPTH(): TransactionObject<string>

    UTXO_SUB_TREE_SIZE(): TransactionObject<string>

    UTXO_TREE_DEPTH(): TransactionObject<string>

    WITHDRAWAL_SUB_TREE_DEPTH(): TransactionObject<string>

    WITHDRAWAL_SUB_TREE_SIZE(): TransactionObject<string>

    WITHDRAWAL_TREE_DEPTH(): TransactionObject<string>

    accumulatedReward(): TransactionObject<string>

    allowedMigrants(arg0: string): TransactionObject<boolean>

    balanceOfReward(account: string): TransactionObject<string>

    claim(amount: number | string): TransactionObject<void>

    consensusProvider(): TransactionObject<string>

    finalizeReward(account: string): TransactionObject<boolean>

    isLayer2(): TransactionObject<boolean>

    isZkopru(): TransactionObject<boolean>

    l2RewardManager(): TransactionObject<string>

    layer2Registry(): TransactionObject<string>

    operator(): TransactionObject<string>

    owner(): TransactionObject<string>

    proposeReward(account: string): TransactionObject<boolean>

    proxied(arg0: string | number[]): TransactionObject<string>

    renounceOwnership(): TransactionObject<void>

    rewards(): TransactionObject<string>

    seigManager(): TransactionObject<string>

    setL2Rewardmanager(_l2RewardManager: string): TransactionObject<void>

    totalReward(): TransactionObject<string>

    transferOwnership(newOwner: string): TransactionObject<void>

    validators(arg0: string | number[]): TransactionObject<string>

    watchTower(): TransactionObject<string>

    setTokamakConnector(
      _layer2Registry: string,
      _seigManager: string,
      _l2RewardManager: string,
      _watchTower: string,
    ): TransactionObject<void>

    connectWatchTower(): TransactionObject<void>

    changeOperator(_newOperator: string): TransactionObject<void>

    updateSeigniorage(): TransactionObject<boolean>

    isProposableTokamak(proposerAddr: string): TransactionObject<boolean>
  }

  events: {
    ClaimedReward: ContractEvent<{
      from: string
      amount: string
      0: string
      1: string
    }>
    ConnectTokamak: ContractEvent<{
      deployer: string
      zkopru: string
      name: string
      0: string
      1: string
      2: string
    }>
    DecreasedReward: ContractEvent<{
      from: string
      amount: string
      0: string
      1: string
    }>
    IncreasedReward: ContractEvent<{
      from: string
      amount: string
      0: string
      1: string
    }>
    OperatorChanged: ContractEvent<string>
    OwnershipTransferred: ContractEvent<{
      previousOwner: string
      newOwner: string
      0: string
      1: string
    }>
    allEvents: (options?: EventOptions, cb?: Callback<EventLog>) => EventEmitter
  }
}
