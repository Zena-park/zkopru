/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from 'bn.js'
import { Contract, ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import { ContractEvent, Callback, TransactionObject, BlockType } from './types'

interface EventOptions {
  filter?: object
  fromBlock?: BlockType
  topics?: string[]
}

export class WatchTowerProxy extends Contract {
  constructor(jsonInterface: any[], address?: string, options?: ContractOptions)

  clone(): WatchTowerProxy

  methods: {
    DEFAULT_ADMIN_ROLE(): TransactionObject<string>

    getRoleAdmin(role: string | number[]): TransactionObject<string>

    getRoleMember(
      role: string | number[],
      index: number | string,
    ): TransactionObject<string>

    getRoleMemberCount(role: string | number[]): TransactionObject<string>

    grantRole(role: string | number[], account: string): TransactionObject<void>

    hasRole(
      role: string | number[],
      account: string,
    ): TransactionObject<boolean>

    layer2Registry(): TransactionObject<string>

    pauseProxy(): TransactionObject<boolean>

    renounceRole(
      role: string | number[],
      account: string,
    ): TransactionObject<void>

    revokeRole(
      role: string | number[],
      account: string,
    ): TransactionObject<void>

    seigManager(): TransactionObject<string>

    supportsInterface(
      interfaceId: string | number[],
    ): TransactionObject<boolean>

    zkopruLayer2Factory(): TransactionObject<string>

    setProxyPause(_pause: boolean): TransactionObject<void>

    upgradeTo(impl: string): TransactionObject<void>

    implementation(): TransactionObject<string>
  }

  events: {
    ChangedStore: ContractEvent<string>
    RoleAdminChanged: ContractEvent<{
      role: string
      previousAdminRole: string
      newAdminRole: string
      0: string
      1: string
      2: string
    }>
    RoleGranted: ContractEvent<{
      role: string
      account: string
      sender: string
      0: string
      1: string
      2: string
    }>
    RoleRevoked: ContractEvent<{
      role: string
      account: string
      sender: string
      0: string
      1: string
      2: string
    }>
    Upgraded: ContractEvent<string>
    allEvents: (options?: EventOptions, cb?: Callback<EventLog>) => EventEmitter
  }
}
